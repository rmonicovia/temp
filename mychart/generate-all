#!/usr/bin/env python3
import os
from os.path import join
import shutil
import sqlite3
import subprocess
from types import SimpleNamespace


def _get_projects():
    basement = [
        'vv-admin-apigw',
        'vv-apigw',
        'vv-frontgw',
        'vv-jornada-assinatura-ngx',
        'vv-jornada-atendimento-ngx',
        'vv-jornada-carrinho-ngx',
        'vv-jornada-catalogo-ngx',
        'vv-jornada-catalogo-servicos-ngx',
        'vv-jornada-crediario-ngx',
        'vv-jornada-crm-ngx',
        'vv-jornada-gestao-pedidos-ngx',
        'vv-jornada-home-ngx',
        'vv-jornada-painel-loja-ngx',
        'vv-jornada-simulador-ngx',
        'vv-jornada-tradein-ngx',
        'vv-viamais-admin-ngx',
        ]

    projects = list()

    for base in basement:
        project = SimpleNamespace(
                name=base,
                path=f'/home/rmonico/repos/{base}/task',
                envs=['base', 'hlg', 'stg', 'prd'])

        projects.append(project)

    return projects


def run(*args):
    return subprocess.run(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)


def runstr(args):
    return subprocess.run(args.split(' '), stdout=subprocess.PIPE, stderr=subprocess.PIPE)


def rundecode(*args):
    return subprocess.run(args, stdout=subprocess.PIPE).stdout.decode()


def _valid_line(line):
    return not line.startswith('# Source: ') and line != '---\n'


def _sanitize_file(path):
    oldpath = path + '.old'
    shutil.move(path, oldpath)

    with open(oldpath) as oldfile:
        with open(path, 'w') as newfile:
            for line in oldfile.readlines():
                if _valid_line(line):
                   newfile.write(line)

    os.unlink(oldpath)


def _sanitize_files(path):
    for obj in [join(path, o) for o in os.listdir(path)]:
        if os.path.isdir(obj):
            _sanitize_files(obj)
        elif os.path.isfile(obj) and obj.endswith('.yaml'):
            _sanitize_file(obj)


def main():
    projects = _get_projects()

    generatorfolder = os.getcwd()

    sourcefolder = join(generatorfolder, 'source')

    chartfolder = join(generatorfolder, 'output', 'mychart', 'templates', 'chart')

    valuesfile = join(chartfolder, 'values.yaml')
    chartfile = join(chartfolder, 'Chart.yaml')
    templatesdir = join(generatorfolder, '_templates')
    # criar
    # viaopsfile = join(chartfolder, 'viaops.yaml')

    errors = dict()

    bold = rundecode('tput', 'bold')
    green = rundecode('tput', 'setaf', '10')
    red = rundecode('tput', 'setaf', '1')
    boldgreen = bold + green
    boldred = bold + red
    reset = rundecode('tput', 'sgr0')

    ok_str = f'\r[ {boldgreen}OK{reset} ]'
    err_str = f'\r[ {boldred}ER{reset} ]'

    commitcommand = 'git commit --message'.split(' ')
    commitcommand.append('feat(CMOB-2670): esteiras migradas')

    # breakpoint()
    for proj in projects:
        print(f'Migrating project "{proj.name}" ("{proj.path}")')

        if os.path.exists(sourcefolder):
            shutil.rmtree(sourcefolder)

        os.chdir(proj.path)

        shutil.copytree('kustomize', sourcefolder)

        chartdir = join(proj.path, 'chart')

        if not os.path.exists(chartdir):
            os.makedirs(join(chartdir, 'overlays'), exist_ok=True)

        os.chdir(generatorfolder)

        for env in proj.envs:
            print(f'[   ]  {env}', end='')

            proc = run('./generate', proj.name, env)

            if proc.returncode != 0:
                print(err_str)
                errors.setdefault(proj.name, list()).append(env)

                errorsdir = join('errors', proj.name)
                os.makedirs(errorsdir, exist_ok=True)

                with open(join(errorsdir, env + '.out'), 'wb') as file:
                    file.write(proc.stdout)

                with open(join(errorsdir, env + '.err'), 'wb') as file:
                    file.write(proc.stderr)

                continue

            print(ok_str)

            destchart = join(proj.path, 'chart')

            if env == 'base':
                destvalues = join(destchart, 'values.yaml')
            else:
                destvalues = join(destchart, 'overlays', f'values-{env}.yaml')

            shutil.copyfile(valuesfile, destvalues)

            if env == 'base':
                destchartfile = join(destchart, 'Chart.yaml')
                shutil.copyfile(chartfile, destchartfile)

                desttemplatesdir = join(destchart, 'templates')
                if os.path.exists(desttemplatesdir):
                    shutil.rmtree(desttemplatesdir)
                shutil.copytree(templatesdir, desttemplatesdir)

                # # Pegar o nome correto do arquivo, yaml ou yml
                # destviaopsfile = join(destchart, '.github', 'workflows', 'viaops.yaml')
                # shutil.copyfile(viaopsfile, destviaopsfile)

        print()
        shutil.rmtree(sourcefolder)

        os.chdir(proj.path)

        _sanitize_files(join(proj.path, 'chart'))

        runstr('git add -A')
        run(*commitcommand)


    if len(errors) > 0:
        print()
        print('Errors:')
        for proj, envs in errors.items():
            print(f'{proj}: {" ".join(envs)}')

if __name__ == '__main__':
    main()
